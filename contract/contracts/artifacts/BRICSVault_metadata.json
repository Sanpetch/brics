{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_BRICS_Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_BRL_Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_RUB_Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_INR_Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_CNY_Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_ZAR_Address",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_USD_Address",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "adminAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bricsToken",
				"outputs": [
					{
						"internalType": "contract BRICSToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "brlToken",
				"outputs": [
					{
						"internalType": "contract BRLCBDCToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "cbdcTokens",
				"outputs": [
					{
						"internalType": "contract ERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cnyToken",
				"outputs": [
					{
						"internalType": "contract CNYCBDCToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "collateralBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "collateralRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string[]",
						"name": "symbols",
						"type": "string[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "depositCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "exchangeRates",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "getAllowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getBRICSBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "tokenSymbol",
						"type": "string"
					}
				],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "getExchangeRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "getUserCollateral",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserCollateralInUsd",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserCollateralValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalUsdValue",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "goldExchangeRates",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "inrToken",
				"outputs": [
					{
						"internalType": "contract INRCBDCToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "inventiveFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "bricsAmount",
						"type": "uint256"
					}
				],
				"name": "redeemBRICS",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "bricsAmount",
						"type": "uint256"
					}
				],
				"name": "redeemBRICSV1",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rubToken",
				"outputs": [
					{
						"internalType": "contract RUBCBDCToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"name": "setExchangeRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					}
				],
				"name": "setGoldExchangeRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newRate",
						"type": "uint256"
					}
				],
				"name": "setStabilityFeeRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stabilityFeeRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "usdToken",
				"outputs": [
					{
						"internalType": "contract USDCBDCToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zarToken",
				"outputs": [
					{
						"internalType": "contract ZARCBDCToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"redeemBRICS(uint256)": {
					"details": "Withdraw/redeem common workflow. function _withdraw( address caller, address receiver, address owner, uint256 assets, uint256 shares ) internal virtual { if (caller != owner) { _spendAllowance(owner, caller, shares); } // If _asset is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer, // calls the vault, which is assumed not malicious. // // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the // shares are burned and after the assets are transferred, which is a valid state. _burn(owner, shares); SafeERC20.safeTransfer(_asset, receiver, assets); emit Withdraw(caller, receiver, owner, assets, shares); } function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) { uint256 maxShares = maxRedeem(owner); if (shares > maxShares) { revert ERC4626ExceededMaxRedeem(owner, shares, maxShares); } uint256 assets = previewRedeem(shares); _withdraw(_msgSender(), receiver, owner, assets, shares); return assets; }"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contract/contracts/BRICSVault.sol": "BRICSVault"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31",
			"license": "MIT",
			"urls": [
				"bzz-raw://4e0968705bad99747a8e5288aa008678c2be2f471f919dce3925a3cc4f1dee09",
				"dweb:/ipfs/QmbAFnCQfo4tw6ssfQSjhA5LzwHWNNryXN8bX7ty8jiqqn"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contract/contracts/BRICSToken.sol": {
			"keccak256": "0xadeb2a514545207ba3f97dc5fdff573ab59ccb6f1fa60ac1369bb1b39c58d9bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb024021d0f4941bb1ddff91832ba82679627abc49fd051a2d55ba2fccc1bcb1",
				"dweb:/ipfs/Qmeko6HF2kPBgrhcYA4UCzjh9aYeJVprmCykhC2J1gsbqo"
			]
		},
		"contract/contracts/BRICSVault.sol": {
			"keccak256": "0x4e8ec216467e5590f0985785e749ce46af984020f786f217afb82b0eaa138d65",
			"license": "MIT",
			"urls": [
				"bzz-raw://e911b16811a128b91f914b360f8b40d26b2b08d77887085333e9638a974441b8",
				"dweb:/ipfs/QmW9e6p5zAUaHafNS55shMKrk22davAUGoBFKJ8G4QiDxK"
			]
		},
		"contract/contracts/BRLCBDCToken.sol": {
			"keccak256": "0x2430d195483a5d7ad9010c0b973453c3eaf3cff9fed64048b025c3f3bf1d071d",
			"license": "MIT",
			"urls": [
				"bzz-raw://185962dd53e3378328c2849cb6ff180df7b8d925498f15873f8e05c0a8ce21f6",
				"dweb:/ipfs/QmQimsyAcoa4BZMU93KmgALQ9GLGM1vS2QoKuS4VjbDjjq"
			]
		},
		"contract/contracts/CNYCBDCToken.sol": {
			"keccak256": "0x5b15391a153b021deda3cd582572424ee76b71bc702c65dc11e28b205729b6a4",
			"license": "MIT",
			"urls": [
				"bzz-raw://9b8a823f31371a1085f399e97f5a69e490c8698e9c98d59f82f7c4674c55954a",
				"dweb:/ipfs/QmWSoqfQsh2zXUhFmupyZp7a7iYRaCJ2HWFuQHe4ioZVVr"
			]
		},
		"contract/contracts/INRCBDCToken.sol": {
			"keccak256": "0x78ae8b6faed35f6380d21f12563416ab745642b2f93cd1488bef317a001076b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://c59173df7628861a23360fc051b5085fbc5d5d6a5e8c555265b1355af1661158",
				"dweb:/ipfs/QmeSMMXFTWfkffpTetZ2t2JA1V43XUPxx6NwMgK6t2ppUe"
			]
		},
		"contract/contracts/RUBCBDCToken.sol": {
			"keccak256": "0x94eee1420409ab43c80e5e07759f024b0dbe922a57eb69e89db672b7bcb1f2da",
			"license": "MIT",
			"urls": [
				"bzz-raw://0cd17e61de50c440f79f1563f73e0919a0bcdafc409c753f7b3ebfb4733dd982",
				"dweb:/ipfs/QmVASXAgHTcMCpCAPTaH3xWdvCGfa8aPmdLwvK4pe2K2sX"
			]
		},
		"contract/contracts/USDCBDCToken.sol": {
			"keccak256": "0xc5023a75fec4c6a61ac07bd87e2acaabba36c6bec22ac64274bcfcecaee4ffe1",
			"license": "MIT",
			"urls": [
				"bzz-raw://f15b6af5a4ab8c7398aae6f1c1c1cde228879bebdd7a931358538dae94b91132",
				"dweb:/ipfs/QmcuiXyno9ZMnqV3DQi3arkjCNdNEGBrYogs3ZPx1bNjuf"
			]
		},
		"contract/contracts/ZARCBDCToken.sol": {
			"keccak256": "0x3920856036fc36fef2574e64fc09d38b96c4b7552ce4ee34e290ecd2741408d8",
			"license": "MIT",
			"urls": [
				"bzz-raw://a059d6f415efa3335007d28dd587e15d942fc6c0621ba258f8dfc9a4cca6ab14",
				"dweb:/ipfs/QmTj3XJu6ENntfExcCKsrCGS6CDSP5dJRyhpSxpiKcnRM4"
			]
		}
	},
	"version": 1
}